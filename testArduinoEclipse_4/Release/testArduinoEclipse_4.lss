
testArduinoEclipse_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000009de  00000a72  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b3  00800116  00800116  00000a88  2**0
                  ALLOC
  3 .debug_aranges 00000570  00000000  00000000  00000a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cae  00000000  00000000  00000ff8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000681c  00000000  00000000  00001ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001226  00000000  00000000  000084c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00003518  00000000  00000000  000096e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000980  00000000  00000000  0000cc00  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000018f3  00000000  00000000  0000d580  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003ad3  00000000  00000000  0000ee73  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000530  00000000  00000000  00012946  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
    n += write(*buffer++);
  }
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
   4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
	timer0_millis = m;
	timer0_overflow_count++;
}

unsigned long millis()
{
   8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

	SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
   c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  40:	0c 94 56 03 	jmp	0x6ac	; 0x6ac <__vector_16>
  44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  48:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_18>
  4c:	0c 94 0c 01 	jmp	0x218	; 0x218 <__vector_19>
  50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
  68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
  72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
  7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
  86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
  9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
  ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
  be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
  c2:	78 02       	muls	r23, r24

000000c4 <__ctors_end>:
  c4:	11 24       	eor	r1, r1
  c6:	1f be       	out	0x3f, r1	; 63
  c8:	cf ef       	ldi	r28, 0xFF	; 255
  ca:	d8 e0       	ldi	r29, 0x08	; 8
  cc:	de bf       	out	0x3e, r29	; 62
  ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
  d0:	11 e0       	ldi	r17, 0x01	; 1
  d2:	a0 e0       	ldi	r26, 0x00	; 0
  d4:	b1 e0       	ldi	r27, 0x01	; 1
  d6:	ee ed       	ldi	r30, 0xDE	; 222
  d8:	f9 e0       	ldi	r31, 0x09	; 9
  da:	02 c0       	rjmp	.+4      	; 0xe0 <.do_copy_data_start>

000000dc <.do_copy_data_loop>:
  dc:	05 90       	lpm	r0, Z+
  de:	0d 92       	st	X+, r0

000000e0 <.do_copy_data_start>:
  e0:	a6 31       	cpi	r26, 0x16	; 22
  e2:	b1 07       	cpc	r27, r17
  e4:	d9 f7       	brne	.-10     	; 0xdc <.do_copy_data_loop>

000000e6 <__do_clear_bss>:
  e6:	11 e0       	ldi	r17, 0x01	; 1
  e8:	a6 e1       	ldi	r26, 0x16	; 22
  ea:	b1 e0       	ldi	r27, 0x01	; 1
  ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
  ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
  f0:	a9 3c       	cpi	r26, 0xC9	; 201
  f2:	b1 07       	cpc	r27, r17
  f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
  f6:	10 e0       	ldi	r17, 0x00	; 0
  f8:	c4 ec       	ldi	r28, 0xC4	; 196
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	04 c0       	rjmp	.+8      	; 0x106 <.do_global_ctors_start>

000000fe <.do_global_ctors_loop>:
  fe:	22 97       	sbiw	r28, 0x02	; 2
 100:	fe 01       	movw	r30, r28
 102:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__tablejump__>

00000106 <.do_global_ctors_start>:
 106:	c2 3c       	cpi	r28, 0xC2	; 194
 108:	d1 07       	cpc	r29, r17
 10a:	c9 f7       	brne	.-14     	; 0xfe <.do_global_ctors_loop>
 10c:	0e 94 47 03 	call	0x68e	; 0x68e <main>
 110:	0c 94 ed 04 	jmp	0x9da	; 0x9da <_exit>

00000114 <__bad_interrupt>:
 114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_Z7blinkenv>:
}


void blinken()
{
  digitalWrite(led, HIGH);   // turn the LED on (HIGH is the voltage level)
 118:	80 91 04 01 	lds	r24, 0x0104
 11c:	61 e0       	ldi	r22, 0x01	; 1
 11e:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
  delay(1000);               // wait for a second
 122:	68 ee       	ldi	r22, 0xE8	; 232
 124:	73 e0       	ldi	r23, 0x03	; 3
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
  digitalWrite(led, LOW);    // turn the LED off by making the voltage LOW
 12e:	80 91 04 01 	lds	r24, 0x0104
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	0e 94 71 04 	call	0x8e2	; 0x8e2 <digitalWrite>
  delay(1000);               // wait for a second
 138:	68 ee       	ldi	r22, 0xE8	; 232
 13a:	73 e0       	ldi	r23, 0x03	; 3
 13c:	80 e0       	ldi	r24, 0x00	; 0
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	0e 94 9e 03 	call	0x73c	; 0x73c <delay>
  Serial.println("123");
 144:	8e e9       	ldi	r24, 0x9E	; 158
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	60 e0       	ldi	r22, 0x00	; 0
 14a:	71 e0       	ldi	r23, 0x01	; 1
 14c:	0e 94 34 03 	call	0x668	; 0x668 <_ZN5Print7printlnEPKc>

}
 150:	08 95       	ret

00000152 <_Z13setup_blinkenv>:
 */
 int led = 13;

void setup_blinken()
{
  Serial.begin(115200);
 152:	8e e9       	ldi	r24, 0x9E	; 158
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	52 ec       	ldi	r21, 0xC2	; 194
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 47 01 	call	0x28e	; 0x28e <_ZN14HardwareSerial5beginEm>
	// initialize the digital pin as an output.
  pinMode(led, OUTPUT);
 162:	80 91 04 01 	lds	r24, 0x0104
 166:	61 e0       	ldi	r22, 0x01	; 1
 168:	0e 94 32 04 	call	0x864	; 0x864 <pinMode>
}
 16c:	08 95       	ret

0000016e <loop>:
}

// The loop function is called in an endless loop
void loop()
{
  blinken();
 16e:	0e 94 8c 00 	call	0x118	; 0x118 <_Z7blinkenv>
}
 172:	08 95       	ret

00000174 <setup>:


//The setup function is called once at startup of the sketch
void setup()
{
  setup_blinken();
 174:	0e 94 a9 00 	call	0x152	; 0x152 <_Z13setup_blinkenv>
}
 178:	08 95       	ret

0000017a <_Z11serialEventv>:
#if !defined(USART_RX_vect) && !defined(USART0_RX_vect) && \
    !defined(USART_RXC_vect)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
 17a:	08 95       	ret

0000017c <__vector_18>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  ISR(USART_RX_vect)
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	3f 93       	push	r19
 18a:	4f 93       	push	r20
 18c:	8f 93       	push	r24
 18e:	9f 93       	push	r25
 190:	ef 93       	push	r30
 192:	ff 93       	push	r31
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#endif
  {
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
 194:	80 91 c0 00 	lds	r24, 0x00C0
 198:	82 fd       	sbrc	r24, 2
 19a:	1d c0       	rjmp	.+58     	; 0x1d6 <__vector_18+0x5a>
      unsigned char c = UDR0;
 19c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
 1a0:	20 91 56 01 	lds	r18, 0x0156
 1a4:	30 91 57 01 	lds	r19, 0x0157

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
 1a8:	2f 5f       	subi	r18, 0xFF	; 255
 1aa:	3f 4f       	sbci	r19, 0xFF	; 255
 1ac:	2f 73       	andi	r18, 0x3F	; 63
 1ae:	30 70       	andi	r19, 0x00	; 0
 1b0:	80 91 58 01 	lds	r24, 0x0158
 1b4:	90 91 59 01 	lds	r25, 0x0159
 1b8:	28 17       	cp	r18, r24
 1ba:	39 07       	cpc	r19, r25
 1bc:	71 f0       	breq	.+28     	; 0x1da <__vector_18+0x5e>
    buffer->buffer[buffer->head] = c;
 1be:	e0 91 56 01 	lds	r30, 0x0156
 1c2:	f0 91 57 01 	lds	r31, 0x0157
 1c6:	ea 5e       	subi	r30, 0xEA	; 234
 1c8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ca:	40 83       	st	Z, r20
    buffer->head = i;
 1cc:	30 93 57 01 	sts	0x0157, r19
 1d0:	20 93 56 01 	sts	0x0156, r18
 1d4:	02 c0       	rjmp	.+4      	; 0x1da <__vector_18+0x5e>
  #if defined(UDR0)
    if (bit_is_clear(UCSR0A, UPE0)) {
      unsigned char c = UDR0;
      store_char(c, &rx_buffer);
    } else {
      unsigned char c = UDR0;
 1d6:	80 91 c6 00 	lds	r24, 0x00C6
      unsigned char c = UDR;
    };
  #else
    #error UDR not defined
  #endif
  }
 1da:	ff 91       	pop	r31
 1dc:	ef 91       	pop	r30
 1de:	9f 91       	pop	r25
 1e0:	8f 91       	pop	r24
 1e2:	4f 91       	pop	r20
 1e4:	3f 91       	pop	r19
 1e6:	2f 91       	pop	r18
 1e8:	0f 90       	pop	r0
 1ea:	0f be       	out	0x3f, r0	; 63
 1ec:	0f 90       	pop	r0
 1ee:	1f 90       	pop	r1
 1f0:	18 95       	reti

000001f2 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 1f2:	e0 91 aa 01 	lds	r30, 0x01AA
 1f6:	f0 91 ab 01 	lds	r31, 0x01AB
 1fa:	e0 5c       	subi	r30, 0xC0	; 192
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	81 91       	ld	r24, Z+
 200:	91 91       	ld	r25, Z+
 202:	20 81       	ld	r18, Z
 204:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
 206:	82 1b       	sub	r24, r18
 208:	93 0b       	sbc	r25, r19
 20a:	8f 73       	andi	r24, 0x3F	; 63
 20c:	90 70       	andi	r25, 0x00	; 0
 20e:	89 2b       	or	r24, r25
 210:	11 f0       	breq	.+4      	; 0x216 <_Z14serialEventRunv+0x24>
 212:	0e 94 bd 00 	call	0x17a	; 0x17a <_Z11serialEventv>
 216:	08 95       	ret

00000218 <__vector_19>:
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	2f 93       	push	r18
 224:	3f 93       	push	r19
 226:	8f 93       	push	r24
 228:	9f 93       	push	r25
 22a:	ef 93       	push	r30
 22c:	ff 93       	push	r31
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
 22e:	20 91 9a 01 	lds	r18, 0x019A
 232:	30 91 9b 01 	lds	r19, 0x019B
 236:	80 91 9c 01 	lds	r24, 0x019C
 23a:	90 91 9d 01 	lds	r25, 0x019D
 23e:	28 17       	cp	r18, r24
 240:	39 07       	cpc	r19, r25
 242:	31 f4       	brne	.+12     	; 0x250 <__vector_19+0x38>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
 244:	80 91 c1 00 	lds	r24, 0x00C1
 248:	8f 7d       	andi	r24, 0xDF	; 223
 24a:	80 93 c1 00 	sts	0x00C1, r24
 24e:	14 c0       	rjmp	.+40     	; 0x278 <__vector_19+0x60>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 250:	e0 91 9c 01 	lds	r30, 0x019C
 254:	f0 91 9d 01 	lds	r31, 0x019D
 258:	e6 5a       	subi	r30, 0xA6	; 166
 25a:	fe 4f       	sbci	r31, 0xFE	; 254
 25c:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
 25e:	80 91 9c 01 	lds	r24, 0x019C
 262:	90 91 9d 01 	lds	r25, 0x019D
 266:	01 96       	adiw	r24, 0x01	; 1
 268:	8f 73       	andi	r24, 0x3F	; 63
 26a:	90 70       	andi	r25, 0x00	; 0
 26c:	90 93 9d 01 	sts	0x019D, r25
 270:	80 93 9c 01 	sts	0x019C, r24
	
  #if defined(UDR0)
    UDR0 = c;
 274:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
 278:	ff 91       	pop	r31
 27a:	ef 91       	pop	r30
 27c:	9f 91       	pop	r25
 27e:	8f 91       	pop	r24
 280:	3f 91       	pop	r19
 282:	2f 91       	pop	r18
 284:	0f 90       	pop	r0
 286:	0f be       	out	0x3f, r0	; 63
 288:	0f 90       	pop	r0
 28a:	1f 90       	pop	r1
 28c:	18 95       	reti

0000028e <_ZN14HardwareSerial5beginEm>:
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
 28e:	af 92       	push	r10
 290:	bf 92       	push	r11
 292:	df 92       	push	r13
 294:	ef 92       	push	r14
 296:	ff 92       	push	r15
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	ec 01       	movw	r28, r24
 2a2:	7a 01       	movw	r14, r20
 2a4:	8b 01       	movw	r16, r22
 2a6:	dd 24       	eor	r13, r13
 2a8:	40 30       	cpi	r20, 0x00	; 0
 2aa:	81 ee       	ldi	r24, 0xE1	; 225
 2ac:	58 07       	cpc	r21, r24
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	68 07       	cpc	r22, r24
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	78 07       	cpc	r23, r24
 2b6:	11 f0       	breq	.+4      	; 0x2bc <_ZN14HardwareSerial5beginEm+0x2e>
 2b8:	dd 24       	eor	r13, r13
 2ba:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
 2bc:	91 e0       	ldi	r25, 0x01	; 1
 2be:	a9 2e       	mov	r10, r25
 2c0:	b1 2c       	mov	r11, r1
 2c2:	ec 89       	ldd	r30, Y+20	; 0x14
 2c4:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
 2c6:	dd 20       	and	r13, r13
 2c8:	69 f0       	breq	.+26     	; 0x2e4 <_ZN14HardwareSerial5beginEm+0x56>
    *_ucsra = 1 << _u2x;
 2ca:	c5 01       	movw	r24, r10
 2cc:	08 a0       	ldd	r0, Y+32	; 0x20
 2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <_ZN14HardwareSerial5beginEm+0x46>
 2d0:	88 0f       	add	r24, r24
 2d2:	99 1f       	adc	r25, r25
 2d4:	0a 94       	dec	r0
 2d6:	e2 f7       	brpl	.-8      	; 0x2d0 <_ZN14HardwareSerial5beginEm+0x42>
 2d8:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	79 e0       	ldi	r23, 0x09	; 9
 2de:	8d e3       	ldi	r24, 0x3D	; 61
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <_ZN14HardwareSerial5beginEm+0x60>
  } else {
    *_ucsra = 0;
 2e4:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 2e6:	60 e8       	ldi	r22, 0x80	; 128
 2e8:	74 e8       	ldi	r23, 0x84	; 132
 2ea:	8e e1       	ldi	r24, 0x1E	; 30
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	a8 01       	movw	r20, r16
 2f0:	97 01       	movw	r18, r14
 2f2:	0e 94 c5 04 	call	0x98a	; 0x98a <__udivmodsi4>
 2f6:	21 50       	subi	r18, 0x01	; 1
 2f8:	30 40       	sbci	r19, 0x00	; 0
 2fa:	40 40       	sbci	r20, 0x00	; 0
 2fc:	50 40       	sbci	r21, 0x00	; 0
 2fe:	56 95       	lsr	r21
 300:	47 95       	ror	r20
 302:	37 95       	ror	r19
 304:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
 306:	80 e1       	ldi	r24, 0x10	; 16
 308:	20 30       	cpi	r18, 0x00	; 0
 30a:	38 07       	cpc	r19, r24
 30c:	20 f0       	brcs	.+8      	; 0x316 <_ZN14HardwareSerial5beginEm+0x88>
 30e:	dd 20       	and	r13, r13
 310:	11 f0       	breq	.+4      	; 0x316 <_ZN14HardwareSerial5beginEm+0x88>
 312:	dd 24       	eor	r13, r13
 314:	d6 cf       	rjmp	.-84     	; 0x2c2 <_ZN14HardwareSerial5beginEm+0x34>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 316:	e8 89       	ldd	r30, Y+16	; 0x10
 318:	f9 89       	ldd	r31, Y+17	; 0x11
 31a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
 31c:	ea 89       	ldd	r30, Y+18	; 0x12
 31e:	fb 89       	ldd	r31, Y+19	; 0x13
 320:	20 83       	st	Z, r18

  transmitting = false;
 322:	19 a2       	std	Y+33, r1	; 0x21

  sbi(*_ucsrb, _rxen);
 324:	ee 89       	ldd	r30, Y+22	; 0x16
 326:	ff 89       	ldd	r31, Y+23	; 0x17
 328:	40 81       	ld	r20, Z
 32a:	21 e0       	ldi	r18, 0x01	; 1
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	c9 01       	movw	r24, r18
 330:	0c 8c       	ldd	r0, Y+28	; 0x1c
 332:	02 c0       	rjmp	.+4      	; 0x338 <_ZN14HardwareSerial5beginEm+0xaa>
 334:	88 0f       	add	r24, r24
 336:	99 1f       	adc	r25, r25
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <_ZN14HardwareSerial5beginEm+0xa6>
 33c:	48 2b       	or	r20, r24
 33e:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
 340:	ee 89       	ldd	r30, Y+22	; 0x16
 342:	ff 89       	ldd	r31, Y+23	; 0x17
 344:	40 81       	ld	r20, Z
 346:	c9 01       	movw	r24, r18
 348:	0d 8c       	ldd	r0, Y+29	; 0x1d
 34a:	02 c0       	rjmp	.+4      	; 0x350 <_ZN14HardwareSerial5beginEm+0xc2>
 34c:	88 0f       	add	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	0a 94       	dec	r0
 352:	e2 f7       	brpl	.-8      	; 0x34c <_ZN14HardwareSerial5beginEm+0xbe>
 354:	48 2b       	or	r20, r24
 356:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
 358:	ee 89       	ldd	r30, Y+22	; 0x16
 35a:	ff 89       	ldd	r31, Y+23	; 0x17
 35c:	40 81       	ld	r20, Z
 35e:	c9 01       	movw	r24, r18
 360:	0e 8c       	ldd	r0, Y+30	; 0x1e
 362:	02 c0       	rjmp	.+4      	; 0x368 <_ZN14HardwareSerial5beginEm+0xda>
 364:	88 0f       	add	r24, r24
 366:	99 1f       	adc	r25, r25
 368:	0a 94       	dec	r0
 36a:	e2 f7       	brpl	.-8      	; 0x364 <_ZN14HardwareSerial5beginEm+0xd6>
 36c:	48 2b       	or	r20, r24
 36e:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
 370:	ee 89       	ldd	r30, Y+22	; 0x16
 372:	ff 89       	ldd	r31, Y+23	; 0x17
 374:	80 81       	ld	r24, Z
 376:	0f 8c       	ldd	r0, Y+31	; 0x1f
 378:	02 c0       	rjmp	.+4      	; 0x37e <_ZN14HardwareSerial5beginEm+0xf0>
 37a:	22 0f       	add	r18, r18
 37c:	33 1f       	adc	r19, r19
 37e:	0a 94       	dec	r0
 380:	e2 f7       	brpl	.-8      	; 0x37a <_ZN14HardwareSerial5beginEm+0xec>
 382:	20 95       	com	r18
 384:	28 23       	and	r18, r24
 386:	20 83       	st	Z, r18
}
 388:	df 91       	pop	r29
 38a:	cf 91       	pop	r28
 38c:	1f 91       	pop	r17
 38e:	0f 91       	pop	r16
 390:	ff 90       	pop	r15
 392:	ef 90       	pop	r14
 394:	df 90       	pop	r13
 396:	bf 90       	pop	r11
 398:	af 90       	pop	r10
 39a:	08 95       	ret

0000039c <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
 39c:	dc 01       	movw	r26, r24
 39e:	1c 96       	adiw	r26, 0x0c	; 12
 3a0:	ed 91       	ld	r30, X+
 3a2:	fc 91       	ld	r31, X
 3a4:	1d 97       	sbiw	r26, 0x0d	; 13
 3a6:	e0 5c       	subi	r30, 0xC0	; 192
 3a8:	ff 4f       	sbci	r31, 0xFF	; 255
 3aa:	21 91       	ld	r18, Z+
 3ac:	31 91       	ld	r19, Z+
 3ae:	80 81       	ld	r24, Z
 3b0:	91 81       	ldd	r25, Z+1	; 0x01
 3b2:	28 1b       	sub	r18, r24
 3b4:	39 0b       	sbc	r19, r25
 3b6:	2f 73       	andi	r18, 0x3F	; 63
 3b8:	30 70       	andi	r19, 0x00	; 0
}
 3ba:	c9 01       	movw	r24, r18
 3bc:	08 95       	ret

000003be <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 3be:	dc 01       	movw	r26, r24
 3c0:	1c 96       	adiw	r26, 0x0c	; 12
 3c2:	ed 91       	ld	r30, X+
 3c4:	fc 91       	ld	r31, X
 3c6:	1d 97       	sbiw	r26, 0x0d	; 13
 3c8:	e0 5c       	subi	r30, 0xC0	; 192
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	20 81       	ld	r18, Z
 3ce:	31 81       	ldd	r19, Z+1	; 0x01
 3d0:	e0 54       	subi	r30, 0x40	; 64
 3d2:	f0 40       	sbci	r31, 0x00	; 0
 3d4:	df 01       	movw	r26, r30
 3d6:	ae 5b       	subi	r26, 0xBE	; 190
 3d8:	bf 4f       	sbci	r27, 0xFF	; 255
 3da:	8d 91       	ld	r24, X+
 3dc:	9c 91       	ld	r25, X
 3de:	11 97       	sbiw	r26, 0x01	; 1
 3e0:	28 17       	cp	r18, r24
 3e2:	39 07       	cpc	r19, r25
 3e4:	19 f4       	brne	.+6      	; 0x3ec <_ZN14HardwareSerial4peekEv+0x2e>
 3e6:	2f ef       	ldi	r18, 0xFF	; 255
 3e8:	3f ef       	ldi	r19, 0xFF	; 255
 3ea:	07 c0       	rjmp	.+14     	; 0x3fa <_ZN14HardwareSerial4peekEv+0x3c>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 3ec:	8d 91       	ld	r24, X+
 3ee:	9c 91       	ld	r25, X
 3f0:	e8 0f       	add	r30, r24
 3f2:	f9 1f       	adc	r31, r25
 3f4:	80 81       	ld	r24, Z
 3f6:	28 2f       	mov	r18, r24
 3f8:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 3fa:	c9 01       	movw	r24, r18
 3fc:	08 95       	ret

000003fe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 3fe:	dc 01       	movw	r26, r24
 400:	1c 96       	adiw	r26, 0x0c	; 12
 402:	ed 91       	ld	r30, X+
 404:	fc 91       	ld	r31, X
 406:	1d 97       	sbiw	r26, 0x0d	; 13
 408:	e0 5c       	subi	r30, 0xC0	; 192
 40a:	ff 4f       	sbci	r31, 0xFF	; 255
 40c:	20 81       	ld	r18, Z
 40e:	31 81       	ldd	r19, Z+1	; 0x01
 410:	e0 54       	subi	r30, 0x40	; 64
 412:	f0 40       	sbci	r31, 0x00	; 0
 414:	df 01       	movw	r26, r30
 416:	ae 5b       	subi	r26, 0xBE	; 190
 418:	bf 4f       	sbci	r27, 0xFF	; 255
 41a:	8d 91       	ld	r24, X+
 41c:	9c 91       	ld	r25, X
 41e:	11 97       	sbiw	r26, 0x01	; 1
 420:	28 17       	cp	r18, r24
 422:	39 07       	cpc	r19, r25
 424:	19 f4       	brne	.+6      	; 0x42c <_ZN14HardwareSerial4readEv+0x2e>
 426:	2f ef       	ldi	r18, 0xFF	; 255
 428:	3f ef       	ldi	r19, 0xFF	; 255
 42a:	10 c0       	rjmp	.+32     	; 0x44c <_ZN14HardwareSerial4readEv+0x4e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 42c:	8d 91       	ld	r24, X+
 42e:	9c 91       	ld	r25, X
 430:	11 97       	sbiw	r26, 0x01	; 1
 432:	e8 0f       	add	r30, r24
 434:	f9 1f       	adc	r31, r25
 436:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
 438:	8d 91       	ld	r24, X+
 43a:	9c 91       	ld	r25, X
 43c:	11 97       	sbiw	r26, 0x01	; 1
 43e:	01 96       	adiw	r24, 0x01	; 1
 440:	8f 73       	andi	r24, 0x3F	; 63
 442:	90 70       	andi	r25, 0x00	; 0
 444:	11 96       	adiw	r26, 0x01	; 1
 446:	9c 93       	st	X, r25
 448:	8e 93       	st	-X, r24
    return c;
 44a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
 44c:	c9 01       	movw	r24, r18
 44e:	08 95       	ret

00000450 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 450:	dc 01       	movw	r26, r24
{
  // UDR is kept full while the buffer is not empty, so TXC triggers when EMPTY && SENT
  while (transmitting && ! (*_ucsra & _BV(TXC0)));
 452:	91 96       	adiw	r26, 0x21	; 33
 454:	8c 91       	ld	r24, X
 456:	91 97       	sbiw	r26, 0x21	; 33
 458:	88 23       	and	r24, r24
 45a:	39 f0       	breq	.+14     	; 0x46a <_ZN14HardwareSerial5flushEv+0x1a>
 45c:	54 96       	adiw	r26, 0x14	; 20
 45e:	ed 91       	ld	r30, X+
 460:	fc 91       	ld	r31, X
 462:	55 97       	sbiw	r26, 0x15	; 21
 464:	80 81       	ld	r24, Z
 466:	86 ff       	sbrs	r24, 6
 468:	f9 cf       	rjmp	.-14     	; 0x45c <_ZN14HardwareSerial5flushEv+0xc>
  transmitting = false;
 46a:	91 96       	adiw	r26, 0x21	; 33
 46c:	1c 92       	st	X, r1
}
 46e:	08 95       	ret

00000470 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
 470:	cf 93       	push	r28
 472:	df 93       	push	r29
 474:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
 476:	ee 85       	ldd	r30, Y+14	; 0x0e
 478:	ff 85       	ldd	r31, Y+15	; 0x0f
 47a:	e0 5c       	subi	r30, 0xC0	; 192
 47c:	ff 4f       	sbci	r31, 0xFF	; 255
 47e:	20 81       	ld	r18, Z
 480:	31 81       	ldd	r19, Z+1	; 0x01
 482:	e0 54       	subi	r30, 0x40	; 64
 484:	f0 40       	sbci	r31, 0x00	; 0
 486:	2f 5f       	subi	r18, 0xFF	; 255
 488:	3f 4f       	sbci	r19, 0xFF	; 255
 48a:	2f 73       	andi	r18, 0x3F	; 63
 48c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
 48e:	df 01       	movw	r26, r30
 490:	ae 5b       	subi	r26, 0xBE	; 190
 492:	bf 4f       	sbci	r27, 0xFF	; 255
 494:	8d 91       	ld	r24, X+
 496:	9c 91       	ld	r25, X
 498:	11 97       	sbiw	r26, 0x01	; 1
 49a:	28 17       	cp	r18, r24
 49c:	39 07       	cpc	r19, r25
 49e:	d1 f3       	breq	.-12     	; 0x494 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
 4a0:	e0 5c       	subi	r30, 0xC0	; 192
 4a2:	ff 4f       	sbci	r31, 0xFF	; 255
 4a4:	80 81       	ld	r24, Z
 4a6:	91 81       	ldd	r25, Z+1	; 0x01
 4a8:	e0 54       	subi	r30, 0x40	; 64
 4aa:	f0 40       	sbci	r31, 0x00	; 0
 4ac:	e8 0f       	add	r30, r24
 4ae:	f9 1f       	adc	r31, r25
 4b0:	60 83       	st	Z, r22
  _tx_buffer->head = i;
 4b2:	ee 85       	ldd	r30, Y+14	; 0x0e
 4b4:	ff 85       	ldd	r31, Y+15	; 0x0f
 4b6:	e0 5c       	subi	r30, 0xC0	; 192
 4b8:	ff 4f       	sbci	r31, 0xFF	; 255
 4ba:	31 83       	std	Z+1, r19	; 0x01
 4bc:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
 4be:	ee 89       	ldd	r30, Y+22	; 0x16
 4c0:	ff 89       	ldd	r31, Y+23	; 0x17
 4c2:	20 81       	ld	r18, Z
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0f 8c       	ldd	r0, Y+31	; 0x1f
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <_ZN14HardwareSerial5writeEh+0x60>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <_ZN14HardwareSerial5writeEh+0x5c>
 4d4:	28 2b       	or	r18, r24
 4d6:	20 83       	st	Z, r18
  // clear the TXC bit -- "can be cleared by writing a one to its bit location"
  transmitting = true;
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	89 a3       	std	Y+33, r24	; 0x21
  sbi(*_ucsra, TXC0);
 4dc:	ec 89       	ldd	r30, Y+20	; 0x14
 4de:	fd 89       	ldd	r31, Y+21	; 0x15
 4e0:	80 81       	ld	r24, Z
 4e2:	80 64       	ori	r24, 0x40	; 64
 4e4:	80 83       	st	Z, r24
  
  return 1;
}
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	df 91       	pop	r29
 4ec:	cf 91       	pop	r28
 4ee:	08 95       	ret

000004f0 <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 4f0:	10 92 a1 01 	sts	0x01A1, r1
 4f4:	10 92 a0 01 	sts	0x01A0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 4f8:	88 ee       	ldi	r24, 0xE8	; 232
 4fa:	93 e0       	ldi	r25, 0x03	; 3
 4fc:	a0 e0       	ldi	r26, 0x00	; 0
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	80 93 a2 01 	sts	0x01A2, r24
 504:	90 93 a3 01 	sts	0x01A3, r25
 508:	a0 93 a4 01 	sts	0x01A4, r26
 50c:	b0 93 a5 01 	sts	0x01A5, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *ucsrc, volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 510:	8a e0       	ldi	r24, 0x0A	; 10
 512:	91 e0       	ldi	r25, 0x01	; 1
 514:	90 93 9f 01 	sts	0x019F, r25
 518:	80 93 9e 01 	sts	0x019E, r24
{
  _rx_buffer = rx_buffer;
 51c:	86 e1       	ldi	r24, 0x16	; 22
 51e:	91 e0       	ldi	r25, 0x01	; 1
 520:	90 93 ab 01 	sts	0x01AB, r25
 524:	80 93 aa 01 	sts	0x01AA, r24
  _tx_buffer = tx_buffer;
 528:	8a e5       	ldi	r24, 0x5A	; 90
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	90 93 ad 01 	sts	0x01AD, r25
 530:	80 93 ac 01 	sts	0x01AC, r24
  _ubrrh = ubrrh;
 534:	85 ec       	ldi	r24, 0xC5	; 197
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 af 01 	sts	0x01AF, r25
 53c:	80 93 ae 01 	sts	0x01AE, r24
  _ubrrl = ubrrl;
 540:	84 ec       	ldi	r24, 0xC4	; 196
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	90 93 b1 01 	sts	0x01B1, r25
 548:	80 93 b0 01 	sts	0x01B0, r24
  _ucsra = ucsra;
 54c:	80 ec       	ldi	r24, 0xC0	; 192
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	90 93 b3 01 	sts	0x01B3, r25
 554:	80 93 b2 01 	sts	0x01B2, r24
  _ucsrb = ucsrb;
 558:	81 ec       	ldi	r24, 0xC1	; 193
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	90 93 b5 01 	sts	0x01B5, r25
 560:	80 93 b4 01 	sts	0x01B4, r24
  _ucsrc = ucsrc;
 564:	82 ec       	ldi	r24, 0xC2	; 194
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	90 93 b7 01 	sts	0x01B7, r25
 56c:	80 93 b6 01 	sts	0x01B6, r24
  _udr = udr;
 570:	86 ec       	ldi	r24, 0xC6	; 198
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	90 93 b9 01 	sts	0x01B9, r25
 578:	80 93 b8 01 	sts	0x01B8, r24
  _rxen = rxen;
 57c:	84 e0       	ldi	r24, 0x04	; 4
 57e:	80 93 ba 01 	sts	0x01BA, r24
  _txen = txen;
 582:	83 e0       	ldi	r24, 0x03	; 3
 584:	80 93 bb 01 	sts	0x01BB, r24
  _rxcie = rxcie;
 588:	87 e0       	ldi	r24, 0x07	; 7
 58a:	80 93 bc 01 	sts	0x01BC, r24
  _udrie = udrie;
 58e:	85 e0       	ldi	r24, 0x05	; 5
 590:	80 93 bd 01 	sts	0x01BD, r24
  _u2x = u2x;
 594:	81 e0       	ldi	r24, 0x01	; 1
 596:	80 93 be 01 	sts	0x01BE, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UCSRC, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UCSR0C, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
 59a:	08 95       	ret

0000059c <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
 59c:	cf 92       	push	r12
 59e:	df 92       	push	r13
 5a0:	ef 92       	push	r14
 5a2:	ff 92       	push	r15
 5a4:	0f 93       	push	r16
 5a6:	1f 93       	push	r17
 5a8:	cf 93       	push	r28
 5aa:	df 93       	push	r29
 5ac:	7c 01       	movw	r14, r24
 5ae:	6b 01       	movw	r12, r22
 5b0:	8a 01       	movw	r16, r20
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
 5b6:	0f c0       	rjmp	.+30     	; 0x5d6 <_ZN5Print5writeEPKhj+0x3a>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
 5b8:	d6 01       	movw	r26, r12
 5ba:	6d 91       	ld	r22, X+
 5bc:	6d 01       	movw	r12, r26
 5be:	d7 01       	movw	r26, r14
 5c0:	ed 91       	ld	r30, X+
 5c2:	fc 91       	ld	r31, X
 5c4:	01 90       	ld	r0, Z+
 5c6:	f0 81       	ld	r31, Z
 5c8:	e0 2d       	mov	r30, r0
 5ca:	c7 01       	movw	r24, r14
 5cc:	09 95       	icall
 5ce:	c8 0f       	add	r28, r24
 5d0:	d9 1f       	adc	r29, r25
 5d2:	01 50       	subi	r16, 0x01	; 1
 5d4:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 5d6:	01 15       	cp	r16, r1
 5d8:	11 05       	cpc	r17, r1
 5da:	71 f7       	brne	.-36     	; 0x5b8 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
 5dc:	ce 01       	movw	r24, r28
 5de:	df 91       	pop	r29
 5e0:	cf 91       	pop	r28
 5e2:	1f 91       	pop	r17
 5e4:	0f 91       	pop	r16
 5e6:	ff 90       	pop	r15
 5e8:	ef 90       	pop	r14
 5ea:	df 90       	pop	r13
 5ec:	cf 90       	pop	r12
 5ee:	08 95       	ret

000005f0 <_ZN5Print7printlnEv>:
size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
}

size_t Print::println(void)
 5f0:	ef 92       	push	r14
 5f2:	ff 92       	push	r15
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 5fa:	dc 01       	movw	r26, r24
 5fc:	ed 91       	ld	r30, X+
 5fe:	fc 91       	ld	r31, X
 600:	01 90       	ld	r0, Z+
 602:	f0 81       	ld	r31, Z
 604:	e0 2d       	mov	r30, r0
 606:	6d e0       	ldi	r22, 0x0D	; 13
 608:	09 95       	icall
 60a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
 60c:	d8 01       	movw	r26, r16
 60e:	ed 91       	ld	r30, X+
 610:	fc 91       	ld	r31, X
 612:	01 90       	ld	r0, Z+
 614:	f0 81       	ld	r31, Z
 616:	e0 2d       	mov	r30, r0
 618:	c8 01       	movw	r24, r16
 61a:	6a e0       	ldi	r22, 0x0A	; 10
 61c:	09 95       	icall
 61e:	9c 01       	movw	r18, r24
 620:	2e 0d       	add	r18, r14
 622:	3f 1d       	adc	r19, r15
 624:	c9 01       	movw	r24, r18
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	08 95       	ret

00000630 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	ec 01       	movw	r28, r24
      if (str == NULL) return 0;
 636:	61 15       	cp	r22, r1
 638:	71 05       	cpc	r23, r1
 63a:	19 f4       	brne	.+6      	; 0x642 <_ZN5Print5writeEPKc+0x12>
 63c:	20 e0       	ldi	r18, 0x00	; 0
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	0f c0       	rjmp	.+30     	; 0x660 <_ZN5Print5writeEPKc+0x30>
      return write((const uint8_t *)str, strlen(str));
 642:	db 01       	movw	r26, r22
 644:	0d 90       	ld	r0, X+
 646:	00 20       	and	r0, r0
 648:	e9 f7       	brne	.-6      	; 0x644 <_ZN5Print5writeEPKc+0x14>
 64a:	11 97       	sbiw	r26, 0x01	; 1
 64c:	a6 1b       	sub	r26, r22
 64e:	b7 0b       	sbc	r27, r23
 650:	e8 81       	ld	r30, Y
 652:	f9 81       	ldd	r31, Y+1	; 0x01
 654:	02 80       	ldd	r0, Z+2	; 0x02
 656:	f3 81       	ldd	r31, Z+3	; 0x03
 658:	e0 2d       	mov	r30, r0
 65a:	ad 01       	movw	r20, r26
 65c:	09 95       	icall
 65e:	9c 01       	movw	r18, r24
    }
 660:	c9 01       	movw	r24, r18
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret

00000668 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
 668:	ef 92       	push	r14
 66a:	ff 92       	push	r15
 66c:	0f 93       	push	r16
 66e:	1f 93       	push	r17
 670:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 672:	0e 94 18 03 	call	0x630	; 0x630 <_ZN5Print5writeEPKc>
 676:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 678:	c7 01       	movw	r24, r14
 67a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <_ZN5Print7printlnEv>
 67e:	08 0f       	add	r16, r24
 680:	19 1f       	adc	r17, r25
  return n;
}
 682:	c8 01       	movw	r24, r16
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	ff 90       	pop	r15
 68a:	ef 90       	pop	r14
 68c:	08 95       	ret

0000068e <main>:
#include <Arduino.h>

int main(void)
 68e:	cf 93       	push	r28
 690:	df 93       	push	r29
{
	init();
 692:	0e 94 f7 03 	call	0x7ee	; 0x7ee <init>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
 696:	0e 94 ba 00 	call	0x174	; 0x174 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 69a:	c9 ef       	ldi	r28, 0xF9	; 249
 69c:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
 69e:	0e 94 b7 00 	call	0x16e	; 0x16e <loop>
		if (serialEventRun) serialEventRun();
 6a2:	20 97       	sbiw	r28, 0x00	; 0
 6a4:	e1 f3       	breq	.-8      	; 0x69e <main+0x10>
 6a6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <_Z14serialEventRunv>
 6aa:	f9 cf       	rjmp	.-14     	; 0x69e <main+0x10>

000006ac <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 6ac:	1f 92       	push	r1
 6ae:	0f 92       	push	r0
 6b0:	0f b6       	in	r0, 0x3f	; 63
 6b2:	0f 92       	push	r0
 6b4:	11 24       	eor	r1, r1
 6b6:	2f 93       	push	r18
 6b8:	3f 93       	push	r19
 6ba:	8f 93       	push	r24
 6bc:	9f 93       	push	r25
 6be:	af 93       	push	r26
 6c0:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 6c2:	80 91 c4 01 	lds	r24, 0x01C4
 6c6:	90 91 c5 01 	lds	r25, 0x01C5
 6ca:	a0 91 c6 01 	lds	r26, 0x01C6
 6ce:	b0 91 c7 01 	lds	r27, 0x01C7
	unsigned char f = timer0_fract;
 6d2:	30 91 c8 01 	lds	r19, 0x01C8

	m += MILLIS_INC;
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	a1 1d       	adc	r26, r1
 6da:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
 6dc:	23 2f       	mov	r18, r19
 6de:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
 6e0:	2d 37       	cpi	r18, 0x7D	; 125
 6e2:	20 f0       	brcs	.+8      	; 0x6ec <__vector_16+0x40>
		f -= FRACT_MAX;
 6e4:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
 6e6:	01 96       	adiw	r24, 0x01	; 1
 6e8:	a1 1d       	adc	r26, r1
 6ea:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
 6ec:	20 93 c8 01 	sts	0x01C8, r18
	timer0_millis = m;
 6f0:	80 93 c4 01 	sts	0x01C4, r24
 6f4:	90 93 c5 01 	sts	0x01C5, r25
 6f8:	a0 93 c6 01 	sts	0x01C6, r26
 6fc:	b0 93 c7 01 	sts	0x01C7, r27
	timer0_overflow_count++;
 700:	80 91 c0 01 	lds	r24, 0x01C0
 704:	90 91 c1 01 	lds	r25, 0x01C1
 708:	a0 91 c2 01 	lds	r26, 0x01C2
 70c:	b0 91 c3 01 	lds	r27, 0x01C3
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	a1 1d       	adc	r26, r1
 714:	b1 1d       	adc	r27, r1
 716:	80 93 c0 01 	sts	0x01C0, r24
 71a:	90 93 c1 01 	sts	0x01C1, r25
 71e:	a0 93 c2 01 	sts	0x01C2, r26
 722:	b0 93 c3 01 	sts	0x01C3, r27
}
 726:	bf 91       	pop	r27
 728:	af 91       	pop	r26
 72a:	9f 91       	pop	r25
 72c:	8f 91       	pop	r24
 72e:	3f 91       	pop	r19
 730:	2f 91       	pop	r18
 732:	0f 90       	pop	r0
 734:	0f be       	out	0x3f, r0	; 63
 736:	0f 90       	pop	r0
 738:	1f 90       	pop	r1
 73a:	18 95       	reti

0000073c <delay>:
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
 73c:	9b 01       	movw	r18, r22
 73e:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 740:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
 742:	f8 94       	cli
	m = timer0_overflow_count;
 744:	80 91 c0 01 	lds	r24, 0x01C0
 748:	90 91 c1 01 	lds	r25, 0x01C1
 74c:	a0 91 c2 01 	lds	r26, 0x01C2
 750:	b0 91 c3 01 	lds	r27, 0x01C3
#if defined(TCNT0)
	t = TCNT0;
 754:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 756:	a8 9b       	sbis	0x15, 0	; 21
 758:	05 c0       	rjmp	.+10     	; 0x764 <delay+0x28>
 75a:	6f 3f       	cpi	r22, 0xFF	; 255
 75c:	19 f0       	breq	.+6      	; 0x764 <delay+0x28>
		m++;
 75e:	01 96       	adiw	r24, 0x01	; 1
 760:	a1 1d       	adc	r26, r1
 762:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 764:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
 766:	ba 2f       	mov	r27, r26
 768:	a9 2f       	mov	r26, r25
 76a:	98 2f       	mov	r25, r24
 76c:	88 27       	eor	r24, r24
 76e:	86 0f       	add	r24, r22
 770:	91 1d       	adc	r25, r1
 772:	a1 1d       	adc	r26, r1
 774:	b1 1d       	adc	r27, r1
 776:	62 e0       	ldi	r22, 0x02	; 2
 778:	88 0f       	add	r24, r24
 77a:	99 1f       	adc	r25, r25
 77c:	aa 1f       	adc	r26, r26
 77e:	bb 1f       	adc	r27, r27
 780:	6a 95       	dec	r22
 782:	d1 f7       	brne	.-12     	; 0x778 <delay+0x3c>
 784:	bc 01       	movw	r22, r24
 786:	2d c0       	rjmp	.+90     	; 0x7e2 <delay+0xa6>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 788:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
 78a:	f8 94       	cli
	m = timer0_overflow_count;
 78c:	80 91 c0 01 	lds	r24, 0x01C0
 790:	90 91 c1 01 	lds	r25, 0x01C1
 794:	a0 91 c2 01 	lds	r26, 0x01C2
 798:	b0 91 c3 01 	lds	r27, 0x01C3
#if defined(TCNT0)
	t = TCNT0;
 79c:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 79e:	a8 9b       	sbis	0x15, 0	; 21
 7a0:	05 c0       	rjmp	.+10     	; 0x7ac <delay+0x70>
 7a2:	ef 3f       	cpi	r30, 0xFF	; 255
 7a4:	19 f0       	breq	.+6      	; 0x7ac <delay+0x70>
		m++;
 7a6:	01 96       	adiw	r24, 0x01	; 1
 7a8:	a1 1d       	adc	r26, r1
 7aa:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 7ac:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 7ae:	ba 2f       	mov	r27, r26
 7b0:	a9 2f       	mov	r26, r25
 7b2:	98 2f       	mov	r25, r24
 7b4:	88 27       	eor	r24, r24
 7b6:	8e 0f       	add	r24, r30
 7b8:	91 1d       	adc	r25, r1
 7ba:	a1 1d       	adc	r26, r1
 7bc:	b1 1d       	adc	r27, r1
 7be:	e2 e0       	ldi	r30, 0x02	; 2
 7c0:	88 0f       	add	r24, r24
 7c2:	99 1f       	adc	r25, r25
 7c4:	aa 1f       	adc	r26, r26
 7c6:	bb 1f       	adc	r27, r27
 7c8:	ea 95       	dec	r30
 7ca:	d1 f7       	brne	.-12     	; 0x7c0 <delay+0x84>
 7cc:	86 1b       	sub	r24, r22
 7ce:	97 0b       	sbc	r25, r23
 7d0:	88 5e       	subi	r24, 0xE8	; 232
 7d2:	93 40       	sbci	r25, 0x03	; 3
 7d4:	c8 f2       	brcs	.-78     	; 0x788 <delay+0x4c>
			ms--;
 7d6:	21 50       	subi	r18, 0x01	; 1
 7d8:	30 40       	sbci	r19, 0x00	; 0
 7da:	40 40       	sbci	r20, 0x00	; 0
 7dc:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
 7de:	68 51       	subi	r22, 0x18	; 24
 7e0:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 7e2:	21 15       	cp	r18, r1
 7e4:	31 05       	cpc	r19, r1
 7e6:	41 05       	cpc	r20, r1
 7e8:	51 05       	cpc	r21, r1
 7ea:	71 f6       	brne	.-100    	; 0x788 <delay+0x4c>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 7ec:	08 95       	ret

000007ee <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 7ee:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 7f0:	84 b5       	in	r24, 0x24	; 36
 7f2:	82 60       	ori	r24, 0x02	; 2
 7f4:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 7f6:	84 b5       	in	r24, 0x24	; 36
 7f8:	81 60       	ori	r24, 0x01	; 1
 7fa:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 7fc:	85 b5       	in	r24, 0x25	; 37
 7fe:	82 60       	ori	r24, 0x02	; 2
 800:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 802:	85 b5       	in	r24, 0x25	; 37
 804:	81 60       	ori	r24, 0x01	; 1
 806:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 808:	ee e6       	ldi	r30, 0x6E	; 110
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	80 81       	ld	r24, Z
 80e:	81 60       	ori	r24, 0x01	; 1
 810:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 812:	e1 e8       	ldi	r30, 0x81	; 129
 814:	f0 e0       	ldi	r31, 0x00	; 0
 816:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 818:	80 81       	ld	r24, Z
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 81e:	80 81       	ld	r24, Z
 820:	81 60       	ori	r24, 0x01	; 1
 822:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 824:	e0 e8       	ldi	r30, 0x80	; 128
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	81 60       	ori	r24, 0x01	; 1
 82c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 82e:	e1 eb       	ldi	r30, 0xB1	; 177
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	80 81       	ld	r24, Z
 834:	84 60       	ori	r24, 0x04	; 4
 836:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 838:	e0 eb       	ldi	r30, 0xB0	; 176
 83a:	f0 e0       	ldi	r31, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	81 60       	ori	r24, 0x01	; 1
 840:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 842:	ea e7       	ldi	r30, 0x7A	; 122
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	84 60       	ori	r24, 0x04	; 4
 84a:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
 84c:	80 81       	ld	r24, Z
 84e:	82 60       	ori	r24, 0x02	; 2
 850:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
 852:	80 81       	ld	r24, Z
 854:	81 60       	ori	r24, 0x01	; 1
 856:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 858:	80 81       	ld	r24, Z
 85a:	80 68       	ori	r24, 0x80	; 128
 85c:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 85e:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
 862:	08 95       	ret

00000864 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
 864:	cf 93       	push	r28
 866:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
 868:	48 2f       	mov	r20, r24
 86a:	50 e0       	ldi	r21, 0x00	; 0
 86c:	ca 01       	movw	r24, r20
 86e:	86 56       	subi	r24, 0x66	; 102
 870:	9f 4f       	sbci	r25, 0xFF	; 255
 872:	fc 01       	movw	r30, r24
 874:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
 876:	4a 57       	subi	r20, 0x7A	; 122
 878:	5f 4f       	sbci	r21, 0xFF	; 255
 87a:	fa 01       	movw	r30, r20
 87c:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
 87e:	88 23       	and	r24, r24
 880:	69 f1       	breq	.+90     	; 0x8dc <pinMode+0x78>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	88 0f       	add	r24, r24
 886:	99 1f       	adc	r25, r25
 888:	fc 01       	movw	r30, r24
 88a:	e8 59       	subi	r30, 0x98	; 152
 88c:	ff 4f       	sbci	r31, 0xFF	; 255
 88e:	a5 91       	lpm	r26, Z+
 890:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
 892:	fc 01       	movw	r30, r24
 894:	ee 58       	subi	r30, 0x8E	; 142
 896:	ff 4f       	sbci	r31, 0xFF	; 255
 898:	c5 91       	lpm	r28, Z+
 89a:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
 89c:	66 23       	and	r22, r22
 89e:	51 f4       	brne	.+20     	; 0x8b4 <pinMode+0x50>
		uint8_t oldSREG = SREG;
 8a0:	2f b7       	in	r18, 0x3f	; 63
                cli();
 8a2:	f8 94       	cli
		*reg &= ~bit;
 8a4:	8c 91       	ld	r24, X
 8a6:	93 2f       	mov	r25, r19
 8a8:	90 95       	com	r25
 8aa:	89 23       	and	r24, r25
 8ac:	8c 93       	st	X, r24
		*out &= ~bit;
 8ae:	88 81       	ld	r24, Y
 8b0:	89 23       	and	r24, r25
 8b2:	0b c0       	rjmp	.+22     	; 0x8ca <pinMode+0x66>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
 8b4:	62 30       	cpi	r22, 0x02	; 2
 8b6:	61 f4       	brne	.+24     	; 0x8d0 <pinMode+0x6c>
		uint8_t oldSREG = SREG;
 8b8:	2f b7       	in	r18, 0x3f	; 63
                cli();
 8ba:	f8 94       	cli
		*reg &= ~bit;
 8bc:	8c 91       	ld	r24, X
 8be:	93 2f       	mov	r25, r19
 8c0:	90 95       	com	r25
 8c2:	89 23       	and	r24, r25
 8c4:	8c 93       	st	X, r24
		*out |= bit;
 8c6:	88 81       	ld	r24, Y
 8c8:	83 2b       	or	r24, r19
 8ca:	88 83       	st	Y, r24
		SREG = oldSREG;
 8cc:	2f bf       	out	0x3f, r18	; 63
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <pinMode+0x78>
	} else {
		uint8_t oldSREG = SREG;
 8d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
 8d2:	f8 94       	cli
		*reg |= bit;
 8d4:	8c 91       	ld	r24, X
 8d6:	83 2b       	or	r24, r19
 8d8:	8c 93       	st	X, r24
		SREG = oldSREG;
 8da:	9f bf       	out	0x3f, r25	; 63
	}
}
 8dc:	df 91       	pop	r29
 8de:	cf 91       	pop	r28
 8e0:	08 95       	ret

000008e2 <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 8e2:	48 2f       	mov	r20, r24
 8e4:	50 e0       	ldi	r21, 0x00	; 0
 8e6:	ca 01       	movw	r24, r20
 8e8:	82 55       	subi	r24, 0x52	; 82
 8ea:	9f 4f       	sbci	r25, 0xFF	; 255
 8ec:	fc 01       	movw	r30, r24
 8ee:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
 8f0:	ca 01       	movw	r24, r20
 8f2:	86 56       	subi	r24, 0x66	; 102
 8f4:	9f 4f       	sbci	r25, 0xFF	; 255
 8f6:	fc 01       	movw	r30, r24
 8f8:	94 91       	lpm	r25, Z+
	uint8_t port = digitalPinToPort(pin);
 8fa:	4a 57       	subi	r20, 0x7A	; 122
 8fc:	5f 4f       	sbci	r21, 0xFF	; 255
 8fe:	fa 01       	movw	r30, r20
 900:	34 91       	lpm	r19, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 902:	33 23       	and	r19, r19
 904:	09 f4       	brne	.+2      	; 0x908 <__stack+0x9>
 906:	40 c0       	rjmp	.+128    	; 0x988 <__stack+0x89>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 908:	22 23       	and	r18, r18
 90a:	51 f1       	breq	.+84     	; 0x960 <__stack+0x61>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 90c:	23 30       	cpi	r18, 0x03	; 3
 90e:	71 f0       	breq	.+28     	; 0x92c <__stack+0x2d>
 910:	24 30       	cpi	r18, 0x04	; 4
 912:	28 f4       	brcc	.+10     	; 0x91e <__stack+0x1f>
 914:	21 30       	cpi	r18, 0x01	; 1
 916:	a1 f0       	breq	.+40     	; 0x940 <__stack+0x41>
 918:	22 30       	cpi	r18, 0x02	; 2
 91a:	11 f5       	brne	.+68     	; 0x960 <__stack+0x61>
 91c:	14 c0       	rjmp	.+40     	; 0x946 <__stack+0x47>
 91e:	26 30       	cpi	r18, 0x06	; 6
 920:	b1 f0       	breq	.+44     	; 0x94e <__stack+0x4f>
 922:	27 30       	cpi	r18, 0x07	; 7
 924:	c1 f0       	breq	.+48     	; 0x956 <__stack+0x57>
 926:	24 30       	cpi	r18, 0x04	; 4
 928:	d9 f4       	brne	.+54     	; 0x960 <__stack+0x61>
 92a:	04 c0       	rjmp	.+8      	; 0x934 <__stack+0x35>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 92c:	80 91 80 00 	lds	r24, 0x0080
 930:	8f 77       	andi	r24, 0x7F	; 127
 932:	03 c0       	rjmp	.+6      	; 0x93a <__stack+0x3b>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 934:	80 91 80 00 	lds	r24, 0x0080
 938:	8f 7d       	andi	r24, 0xDF	; 223
 93a:	80 93 80 00 	sts	0x0080, r24
 93e:	10 c0       	rjmp	.+32     	; 0x960 <__stack+0x61>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 940:	84 b5       	in	r24, 0x24	; 36
 942:	8f 77       	andi	r24, 0x7F	; 127
 944:	02 c0       	rjmp	.+4      	; 0x94a <__stack+0x4b>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 946:	84 b5       	in	r24, 0x24	; 36
 948:	8f 7d       	andi	r24, 0xDF	; 223
 94a:	84 bd       	out	0x24, r24	; 36
 94c:	09 c0       	rjmp	.+18     	; 0x960 <__stack+0x61>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 94e:	80 91 b0 00 	lds	r24, 0x00B0
 952:	8f 77       	andi	r24, 0x7F	; 127
 954:	03 c0       	rjmp	.+6      	; 0x95c <__stack+0x5d>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 956:	80 91 b0 00 	lds	r24, 0x00B0
 95a:	8f 7d       	andi	r24, 0xDF	; 223
 95c:	80 93 b0 00 	sts	0x00B0, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 960:	e3 2f       	mov	r30, r19
 962:	f0 e0       	ldi	r31, 0x00	; 0
 964:	ee 0f       	add	r30, r30
 966:	ff 1f       	adc	r31, r31
 968:	ee 58       	subi	r30, 0x8E	; 142
 96a:	ff 4f       	sbci	r31, 0xFF	; 255
 96c:	a5 91       	lpm	r26, Z+
 96e:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
 970:	2f b7       	in	r18, 0x3f	; 63
	cli();
 972:	f8 94       	cli

	if (val == LOW) {
 974:	66 23       	and	r22, r22
 976:	21 f4       	brne	.+8      	; 0x980 <__stack+0x81>
		*out &= ~bit;
 978:	8c 91       	ld	r24, X
 97a:	90 95       	com	r25
 97c:	89 23       	and	r24, r25
 97e:	02 c0       	rjmp	.+4      	; 0x984 <__stack+0x85>
	} else {
		*out |= bit;
 980:	8c 91       	ld	r24, X
 982:	89 2b       	or	r24, r25
 984:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
 986:	2f bf       	out	0x3f, r18	; 63
 988:	08 95       	ret

0000098a <__udivmodsi4>:
 98a:	a1 e2       	ldi	r26, 0x21	; 33
 98c:	1a 2e       	mov	r1, r26
 98e:	aa 1b       	sub	r26, r26
 990:	bb 1b       	sub	r27, r27
 992:	fd 01       	movw	r30, r26
 994:	0d c0       	rjmp	.+26     	; 0x9b0 <__udivmodsi4_ep>

00000996 <__udivmodsi4_loop>:
 996:	aa 1f       	adc	r26, r26
 998:	bb 1f       	adc	r27, r27
 99a:	ee 1f       	adc	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	a2 17       	cp	r26, r18
 9a0:	b3 07       	cpc	r27, r19
 9a2:	e4 07       	cpc	r30, r20
 9a4:	f5 07       	cpc	r31, r21
 9a6:	20 f0       	brcs	.+8      	; 0x9b0 <__udivmodsi4_ep>
 9a8:	a2 1b       	sub	r26, r18
 9aa:	b3 0b       	sbc	r27, r19
 9ac:	e4 0b       	sbc	r30, r20
 9ae:	f5 0b       	sbc	r31, r21

000009b0 <__udivmodsi4_ep>:
 9b0:	66 1f       	adc	r22, r22
 9b2:	77 1f       	adc	r23, r23
 9b4:	88 1f       	adc	r24, r24
 9b6:	99 1f       	adc	r25, r25
 9b8:	1a 94       	dec	r1
 9ba:	69 f7       	brne	.-38     	; 0x996 <__udivmodsi4_loop>
 9bc:	60 95       	com	r22
 9be:	70 95       	com	r23
 9c0:	80 95       	com	r24
 9c2:	90 95       	com	r25
 9c4:	9b 01       	movw	r18, r22
 9c6:	ac 01       	movw	r20, r24
 9c8:	bd 01       	movw	r22, r26
 9ca:	cf 01       	movw	r24, r30
 9cc:	08 95       	ret

000009ce <__tablejump2__>:
 9ce:	ee 0f       	add	r30, r30
 9d0:	ff 1f       	adc	r31, r31

000009d2 <__tablejump__>:
 9d2:	05 90       	lpm	r0, Z+
 9d4:	f4 91       	lpm	r31, Z+
 9d6:	e0 2d       	mov	r30, r0
 9d8:	09 94       	ijmp

000009da <_exit>:
 9da:	f8 94       	cli

000009dc <__stop_program>:
 9dc:	ff cf       	rjmp	.-2      	; 0x9dc <__stop_program>
